// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nguyenvanxuanvu/register_course_check/pkg/modulefx/cache (interfaces: CacheService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/nguyenvanxuanvu/register_course_check/pkg/modulefx/client"
)

// MockCacheService is a mock of CacheService interface.
type MockCacheService struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceMockRecorder
}

// MockCacheServiceMockRecorder is the mock recorder for MockCacheService.
type MockCacheServiceMockRecorder struct {
	mock *MockCacheService
}

// NewMockCacheService creates a new mock instance.
func NewMockCacheService(ctrl *gomock.Controller) *MockCacheService {
	mock := &MockCacheService{ctrl: ctrl}
	mock.recorder = &MockCacheServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheService) EXPECT() *MockCacheServiceMockRecorder {
	return m.recorder
}

// GetMinMaxCredit mocks base method.
func (m *MockCacheService) GetMinMaxCredit(arg0 context.Context, arg1 string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinMaxCredit", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinMaxCredit indicates an expected call of GetMinMaxCredit.
func (mr *MockCacheServiceMockRecorder) GetMinMaxCredit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinMaxCredit", reflect.TypeOf((*MockCacheService)(nil).GetMinMaxCredit), arg0, arg1)
}

// GetStudentInfo mocks base method.
func (m *MockCacheService) GetStudentInfo(arg0 context.Context, arg1 string) (*client.StudentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentInfo", arg0, arg1)
	ret0, _ := ret[0].(*client.StudentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentInfo indicates an expected call of GetStudentInfo.
func (mr *MockCacheServiceMockRecorder) GetStudentInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentInfo", reflect.TypeOf((*MockCacheService)(nil).GetStudentInfo), arg0, arg1)
}

// GetStudyResult mocks base method.
func (m *MockCacheService) GetStudyResult(arg0 context.Context, arg1 string) ([]client.CourseResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudyResult", arg0, arg1)
	ret0, _ := ret[0].([]client.CourseResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudyResult indicates an expected call of GetStudyResult.
func (mr *MockCacheServiceMockRecorder) GetStudyResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudyResult", reflect.TypeOf((*MockCacheService)(nil).GetStudyResult), arg0, arg1)
}

// TrySetMinMaxCredit mocks base method.
func (m *MockCacheService) TrySetMinMaxCredit(arg0 context.Context, arg1 string, arg2 []int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrySetMinMaxCredit", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrySetMinMaxCredit indicates an expected call of TrySetMinMaxCredit.
func (mr *MockCacheServiceMockRecorder) TrySetMinMaxCredit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrySetMinMaxCredit", reflect.TypeOf((*MockCacheService)(nil).TrySetMinMaxCredit), arg0, arg1, arg2)
}

// TrySetStudentInfo mocks base method.
func (m *MockCacheService) TrySetStudentInfo(arg0 context.Context, arg1 string, arg2 *client.StudentInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrySetStudentInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrySetStudentInfo indicates an expected call of TrySetStudentInfo.
func (mr *MockCacheServiceMockRecorder) TrySetStudentInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrySetStudentInfo", reflect.TypeOf((*MockCacheService)(nil).TrySetStudentInfo), arg0, arg1, arg2)
}

// TrySetStudyResult mocks base method.
func (m *MockCacheService) TrySetStudyResult(arg0 context.Context, arg1 string, arg2 []client.CourseResult) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrySetStudyResult", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrySetStudyResult indicates an expected call of TrySetStudyResult.
func (mr *MockCacheServiceMockRecorder) TrySetStudyResult(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrySetStudyResult", reflect.TypeOf((*MockCacheService)(nil).TrySetStudyResult), arg0, arg1, arg2)
}
