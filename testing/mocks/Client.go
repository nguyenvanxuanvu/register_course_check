// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nguyenvanxuanvu/register_course_check/pkg/modulefx/client (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/nguyenvanxuanvu/register_course_check/pkg/modulefx/client"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetStudentInfo mocks base method.
func (m *MockClient) GetStudentInfo(arg0 string) *client.StudentInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentInfo", arg0)
	ret0, _ := ret[0].(*client.StudentInfo)
	return ret0
}

// GetStudentInfo indicates an expected call of GetStudentInfo.
func (mr *MockClientMockRecorder) GetStudentInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentInfo", reflect.TypeOf((*MockClient)(nil).GetStudentInfo), arg0)
}

// GetStudyResult mocks base method.
func (m *MockClient) GetStudyResult(arg0 string) []client.CourseResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudyResult", arg0)
	ret0, _ := ret[0].([]client.CourseResult)
	return ret0
}

// GetStudyResult indicates an expected call of GetStudyResult.
func (mr *MockClientMockRecorder) GetStudyResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudyResult", reflect.TypeOf((*MockClient)(nil).GetStudyResult), arg0)
}
